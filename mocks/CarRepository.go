// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "carApi/entity"
)

// CarRepository is an autogenerated mock type for the CarRepository type
type CarRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, car
func (_m *CarRepository) Create(ctx context.Context, car *entity.Car) error {
	ret := _m.Called(ctx, car)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Car) error); ok {
		r0 = rf(ctx, car)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *CarRepository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx
func (_m *CarRepository) Fetch(ctx context.Context) ([]entity.Car, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Car
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Car); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Car)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *CarRepository) GetByID(ctx context.Context, id int64) (entity.Car, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.Car
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.Car); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Car)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, car
func (_m *CarRepository) Update(ctx context.Context, car *entity.Car) error {
	ret := _m.Called(ctx, car)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Car) error); ok {
		r0 = rf(ctx, car)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
